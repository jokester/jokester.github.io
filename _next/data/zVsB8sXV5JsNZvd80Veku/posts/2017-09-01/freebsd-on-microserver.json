{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2017/2017-09-01-freebsd-on-microserver.md","slug":["2017-09-01","freebsd-on-microserver"],"frontMatter":{"title":"A home NAS server running FreeBSD","publishAt":"2017-09-01"}},"mdContent":"\nThis is a memo after installing FreeBSD on my MicroServer. Before that it was Arch Linux.\n\n- toc\n  {:toc}\n\n## Hardware\n\n- HP MicroServer N54L (Gen7)\n- a handicapped N54L 2core cpu\n- 2x8G ECC DDR3 memory\n  - NOTE: N54L is picky about memory: it must be DDR3 ECC _unbuffered_. I found 2 economical modules on eBay at \\$50 / 8GB.\n- 1x256GB SSD for cache and performance-critical data\n  - Connected to onboard SATA port (originally for CDROM)\n- 4x4TB HDDs for data\n  - Connected to 4 HDD bays\n- PCI-E addon cards:\n  - ATI RV810 for HDMI output\n  - Some USB3.0 interface card <!-- TODO: what is the brand? -->\n\n## Install\n\nNothing tricky, just boot from `FreeBSD-11.1-RELEASE-amd64-memstick.img` and go through the steps in installer.\n\n- see [RootOnZFS](https://wiki.freebsd.org/RootOnZFS) for an example of manual partitions\n- see [remote install](https://www.freebsd.org/doc/en/articles/remote-install/installation.html) for guide on headless install\n\n## Hardware compatibility\n\nThe only hardware-related issue is about DMA timeout messages in dmesg. They are SATA \"READ\" commands issued to the SSD but did not return in 5 seconds:\n\n```text\n(ada3:ata2:0:1:0): READ_DMA. ACB: c8 00 80 30 3b 40 00 00 00 00 01 00\n(ada3:ata2:0:1:0): CAM status: Command timeout\n(ada3:ata2:0:1:0): Retrying command\n```\n\nThis seemingly correlates to sys load, but nothing is wrong except the timeout itself (at least `smartctl` and `zpool scrub` zfs scrub says so).\nThere are [similar problem reports](https://forums.freenas.org/index.php?threads/daily-security-run-output-read_dma-command-timeout.26194/)\nand even [a merged patch](https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=195349), however their workaround did not save me.\n\nI found a possible explanation after days: the `hint.ahci.0.msi=\"1\"` helps when the disk is connected to AHCI controller 0, whereas my SSD was connected to a non-AHCI ATA controller.\n\nA similar hint for `atapci.0` (`man ata (4)`) may have fixed this issue, but I went another way: to flash a custom BIOS firmware that enables AHCI on all SATA ports. After SSD is recognized as AHCI device (`ada3 at ahcich5 bus 0 scbus5 target 0 lun 0`), the timeout vanished.\n\nReferences during my quest:\n\n- [how to decode DMA command](http://wiki.osdev.org/ATA/ATAPI_using_DMA#ATA.2FATAPI_Commands)\n- [how to read ATA error](https://ata.wiki.kernel.org/index.php/Libata_error_messages)\n- [freebsd wiki / ata issues](https://wiki.freebsd.org/JeremyChadwick/ATA_issues_and_troubleshooting)\n<!-- TODO: how to download / flash the custom firmware -->\n\n## Post Install / Delay boot from USB root\n\nA `kern.cam.boot_delay` in `/boot/loader.conf` prevents system to boot from USB before it gets ready.\n\n[an extensive example of loader.conf](http://web.mit.edu/freebsd/head/sys/boot/forth/loader.conf)\n\n## Post Install / Packages\n\nBSD have a binary package manager `pkg` now.\n\n```text\n# pkg install                                   \\\n  bash zsh screen git coreutils rsync curl wget \\\n  sudo vim-lite cmake ruby devel/rubygems       \\\n  htop smartmontools ddrescue                   \\\n  vm-bhyve grub2-bhyve\n```\n\n(Binary packages constitutes a good example of the 20 / 80 rule. Personally I cannot recall a single time when I have to touch `make.conf` in my short Gentoo journey.)\n\n<!-- TODO: add 'basic' services: microcode update, etc -->\n\n## Post Install / User and Group\n\n- create new user: `adduser` (interactive)\n- add new user to group: `pw group mod wheel -m MY_USERNAME`\n\n## Post Install / Storage Pool\n\nMy no.1 reason to change to FreeBSD is for ZFS. It seems to me that zfsonlinux still have a not-quite-short way to go.\nThe whole storage is like:\n\n- a `syspo` zpool, created during install\n  - contains a basic FreeBSD system\n  - 32GB of SSD, as a `log` vdev\n- a `datapo` zpool\n  - all 4x4TB HDDs, as a `raidz1` vdev\n  - 4GB of SSD, as a `log` vdev\n    - used by zfs for ZIL\n  - 128GB of SSD, as a `cache` vdev\n    - will be used by zfs for L2ARC (cached IO, dedup table, etc)\n    - the 4x4TB of data would make a DDT (dedup table) of around 100G\n- Rest of SSD is reserved, for ssd lifetime and future use\n\nZFS settings and tuneables:\n\n- enable [Encrypted](http://www.schmidp.com/2014/01/07/zfs-full-disk-encryption-with-freebsd-10-part-2/)\n  - [Unlock Geli-encrypted ZFS Volume - FreeNAS](https://www.openattic.org/posts/unlock-geli-ecrypted-zfs-volume-freenas/)\n  - Wanted [] as in zfsonlinux, sadly it's not part of FreeBSD yet\n- enable LZ4 [compreession](https://www.freebsd.org/doc/handbook/zfs-term.html#zfs-term-compression-lz4)\n  - lz4 / lz4fast saves like 0.5% - 0.8% [benchmark](https://gist.github.com/e921a4620fd8deec648d6b95b342e1ea) with [lzbench](https://github.com/inikep/lzbench)\n  - _Risk_: my server is severly CPU bounded (N54L 2core/2.2G)\n  - this can be always be disabled later: https://serverfault.com/q/499304/74190\n- enable [Dedupe](http://constantin.glez.de/blog/2011/07/zfs-dedupe-or-not-dedupe)\n  - a good BSD guy told me that dedup do save some space\n  - I happen to have a SSD for L2ARC (dedup-table sizes at 5~6GB per TB data)\n  - `When in doubt, check how much` ... in [ZFSTuningGuide](https://wiki.freebsd.org/ZFSTuningGuide#Deduplication)\n- cache stragegy: `all/all` for memory/L2ARC\n- scrub: once per week\n\nZFS References:\n\n- [FreeBSD handbook / zfs-term](https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/zfs-term.html)\n- [FAQ: all-about-zfs](https://www.freebsd.org/doc/en/books/faq/all-about-zfs.html)\n- [ZFS Administration](https://pthree.org/2012/12/18/zfs-administration-part-xi-compression-and-deduplication/)\n- [ZFS: Read Me 1st](http://nex7.blogspot.jp/2013/03/readme1st.html)\n- [Adventures in ZFS: arc, l2arc, dedupe, and streaming workloads](http://weblog.etherized.com/posts/185.html)\n- [Deduplication now in ZFS](https://blogs.oracle.com/jsavit/deduplication-now-in-zfs)\n- [FreeBSD ZFS: Advanced format (4k) drives and you](https://savagedlight.me/2012/07/15/freebsd-zfs-advanced-format/)\n- good bsd/zfs guys on IRC\n\n## Post Install / Services\n\n- Mail\n\n  - forward alert mail with mailgun: [guide](https://marblenix.com/blag/2017/08/20/Receiving-Email-Alerts-from-FreeBSD-using-Mailgun.html)\n  - some [earlier guide](https://www.digitalocean.com/community/tutorials/how-to-send-email-through-an-external-smtp-service-with-sendmail-on-freebsd-10-1) required sendmail to be recompiled. This is not the case today.\n\n- Storage\n\n  - The data pool is exposed with samba\n\n- VMs\n  - [vm-bhyve](https://github.com/churchers/vm-bhyve/wiki/Quickstart) works out of box for creating and managing VMs\n  - All VMs uses bridged network and is now part of my home LAN\n  - VM1: debian x64 for internal services\n  - VM2: CoreOS for public services\n  - VM3: archlinux playground (whole filesystem imported from old Arch Linux)\n\n## Misc Tricks\n\n- We can [access UFS from linux](https://tachibanatech.com/chris/freebsd/)\n"},"__N_SSG":true}