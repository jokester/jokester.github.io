{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2013/2013-12-28-my-vim-bundle.markdown","slug":["2013-12-28","my-vim-bundle"],"frontMatter":{"title":"My vim bundle","publishAt":"2013-12-28"}},"mdContent":"\n(Updated 2017-Jan: the latest bundle can be found in [my dotfile repo](https://github.com/jokester/dotted/blob/master/DOTvimrc.bundle))\n\n- toc\n{:toc}\n\n#### Other\n\n- [`gmarik/vundle`](https://github.com/gmarik/vundle)\n    - one plugin to install them all\n\n- [`mileszs/ack.vim`](https://github.com/mileszs/ack.vim)\n    - ack is a better grep\n\n- [`tpope/vim-fugitive`](https://github.com/tpope/vim-fugitive)\n    - git integration\n\n- [`vim-scripts/DirDiff.vim`](https://github.com/vim-scripts/DirDiff.vim)\n    - compare 2 directories\n\n- [`vim-scripts/FencView.vim`](https://github.com/vim-scripts/FencView.vim)\n    - detect and switch encoding\n\n- [`vim-scripts/The-NERD-tree`](https://github.com/vim-scripts/The-NERD-tree)\n    - a file manager\n\n- [`vim-scripts/TaskList.vim`](https://github.com/vim-scripts/TaskList.vim)\n    - list TODOs / NOTEs\n\n- [`majutsushi/tagbar`](https://github.com/majutsushi/tagbar)\n    - list classes / methods / etc\n\n- [`vim-scripts/Gundo`](https://github.com/vim-scripts/Gundo)\n    - show undo / redo tree\n\n- [`907th/vim-auto-save`](https://github.com/907th/vim-auto-save)\n    - autosave every a few seconds\n\n- [`bkad/CamelCaseMotion`](https://github.com/bkad/CamelCaseMotion)\n    - define [text objects](http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/)\n      for segments in camelcase identifiers\n\n- [`tpope/vim-surround`](https://github.com/tpope/vim-surround)\n    - define text objects for brackets\n\n- [`junegunn/vim-easy-align`](https://github.com/junegunn/vim-easy-align)\n    - align text with delimiters like `[;:=& ]`\n\n- [`vim-scripts/tir_black`](https://github.com/vim-scripts/tir_black)\n    - just a color scheme\n\n#### Dev\n\n- [`scrooloose/syntastic`](https://github.com/scrooloose/syntastic)\n    - syntax check on save\n\n- [`Valloric/YouCompleteMe`](https://github.com/Valloric/YouCompleteMe)\n    - code completion\n\n- [`tpope/vim-endwise`](https://github.com/tpope/vim-endwise)\n    - auto insert `end` / `esac` / `done` to code\n\n- [`tpope/vim-commentary`](https://github.com/tpope/vim-commentary)\n    - fast commenting out\n\n- [`SirVer/ultisnips`](https://github.com/SirVer/ultisnips)\n    - code snippets\n\n- [`tpope/vim-rails`](https://github.com/tpope/vim-rails)\n\n- [`tpope/vim-bundler`](https://github.com/tpope/vim-bundler)\n\n- [`othree/html5.vim`](https://github.com/othree/html5.vim)\n\n- [`tpope/vim-haml`](https://github.com/tpope/vim-haml)\n\n- [`kchmck/vim-coffee-script`](https://github.com/kchmck/vim-coffee-script)\n\n- [`jelera/vim-javascript-syntax`](https://github.com/jelera/vim-javascript-syntax)\n\n#### Appearance\n\n- [`kshenoy/vim-signature`](https://github.com/kshenoy/vim-signature)\n    - show marks beside line numbers\n\n- [`nathanaelkane/vim-indent-guides.git`](https://github.com/nathanaelkane/vim-indent-guides.git)\n    - colorize indent spaces / tabs\n\n- [`ap/vim-css-color`](https://github.com/ap/vim-css-color)\n    - show color codes with colors\n\n- [`bling/vim-airline`](https://github.com/bling/vim-airline)\n    - a pretty pure-VIML status line\n    - use `dupes/screen` if you are a OSX & homebrew user, see [this post](/post/mac-brew/).\n\n#### My dotfiles\n\n##### `.vimrc.vundle`\n\n~~~ vim\n\" vim: ft=vim\nfiletype off\nset rtp+=~/.vim/bundle/vundle/\ncall vundle#rc()\n\nBundle 'gmarik/vundle'\n\n\" detect / switch encoding\nBundle 'vim-scripts/FencView.vim'\n\n\" diff 2 dirs\nBundle 'vim-scripts/DirDiff.vim'\n\n\" better grep\nnnoremap <C-g> :Ack\nBundle 'mileszs/ack.vim'\n\n\" file manager\nnnoremap <F2> :NERDTreeToggle<CR>\nBundle 'vim-scripts/The-NERD-tree'\n    let g:NERDTreeDirArrows=0\n    let NERDTreeIgnore = ['\\.pyc$', '\\.aux$']\n\n\" tasklist\nnnoremap <F3> :TaskList<CR>\nBundle 'vim-scripts/TaskList.vim'\n    let g:tlTokenList = [\"FIXME\", \"TODO\", \"XXX\", \"NOTE\", \"@todo\"]\n\n\" undo tree\nnnoremap <F5> :GundoToggle<CR>\nBundle 'vim-scripts/Gundo'\n\n\" tagbar for classes / methods / etc.\nnnoremap <F6> :TagbarToggle<CR>\nBundle 'majutsushi/tagbar'\n    let g:tagbar_iconchars=['+','-']\n    let g:tagbar_autofocus=1\n    if executable('coffeetags')     \" gem install CoffeeTags\n        let g:tagbar_type_coffee = {\n                    \\ 'ctagsbin' : 'coffeetags',\n                    \\ 'ctagsargs' : '--include-vars',\n                    \\ 'kinds' : [\n                    \\ 'f:functions',\n                    \\ 'o:object',\n                    \\ ],\n                    \\ 'sro' : \".\",\n                    \\ 'kind2scope' : {\n                    \\ 'f' : 'object',\n                    \\ 'o' : 'object',\n                    \\ }\n                    \\ }\n    endif\n\n\" git integration\nnnoremap <F7> :Gdiff<CR>\nnnoremap <F8> :Gstatus<CR>\nBundle 'tpope/vim-fugitive'\n\n\" auto save\nBundle '907th/vim-auto-save'\nlet g:auto_save = 1  \" enable AutoSave on Vim startup\nlet g:auto_save_no_updatetime = 1  \" do not change the 'updatetime' option\n\n\" better text objects for brackets\nBundle 'tpope/vim-surround'\n\n\" text objects for camelCase\nBundle \"bkad/CamelCaseMotion\"\n\n\" fast commenting out\nBundle 'tpope/vim-commentary'\n\n\" align text\nvnoremap <silent> <Enter> :EasyAlign<Enter>\nBundle \"junegunn/vim-easy-align\"\nlet g:easy_align_ignore_groups = []\n    let g:easy_align_delimiters = {\n                \\ '>': { 'pattern': '>>\\|=>\\|>' },\n                \\ '/': { 'pattern': '//\\+\\|/\\*\\|\\*/', 'ignore_groups': ['String'] },\n                \\ '#': { 'pattern': '#\\+', 'ignore_groups': ['String'], 'delimiter_align': 'l' },\n                \\ ']': {\n                \\     'pattern':       '[[\\]]',\n                \\     'left_margin':   0,\n                \\     'right_margin':  0,\n                \\     'stick_to_left': 0\n                \\   },\n                \\ ')': {\n                \\     'pattern':       '[()]',\n                \\     'left_margin':   0,\n                \\     'right_margin':  0,\n                \\     'stick_to_left': 0\n                \\   },\n                \\ 'd': {\n                \\     'pattern': ' \\(\\S\\+\\s*[;=]\\)\\@=',\n                \\     'left_margin': 0,\n                \\     'right_margin': 0\n                \\   },\n                \\ '\\': {\n                \\     'pattern': '\\\\$',\n                \\   },\n                \\ }\n\n\"\"\"\"\"\"\"\"\"\"\"\"\" section: looking\n\" show marks\nBundle \"kshenoy/vim-signature\"\n\nBundle 'nathanaelkane/vim-indent-guides.git'\nlet g:indent_guides_enable_on_vim_startup = 1\nlet g:indent_guides_guide_size = 1\nautocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#ffc261 ctermbg=3 \"applejack\nautocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#f3b6cf ctermbg=4 \"pinkie\n\n\"\"\"\"\"\"\"\"\"\"\"\"\" section: programming related\n\n\" insert closing pair of brackets\n\" Bundle 'vim-scripts/simple-pairs'\n\n\" syntax check\nBundle 'scrooloose/syntastic'\n\n\" code completion\nBundle 'Valloric/YouCompleteMe'\n    let g:ycm_add_preview_to_completeopt=1\n    let g:ycm_key_list_select_completion=[]    \" leave tab to me\n    let g:ycm_key_list_previous_completion=[]\n    let g:ycm_key_invoke_completion = '<C-a>'\n    if v:version < 703 || (v:version == 703 && !has('patch584')) || !has( 'python' )\n        let g:loaded_youcompleteme=1\n    endif\n\n\" Bundle 'vim-ruby/vim-ruby'\n\"     autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete\n\"     autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1\n\"     autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1\n\"     autocmd FileType ruby,eruby let g:rubycomplete_rails = 1\n\n\" code snippets\nBundle 'SirVer/ultisnips'\n\n\" language\nBundle 'tpope/vim-rails'\nBundle 'tpope/vim-bundler'\nBundle 'othree/html5.vim'\nBundle 'ap/vim-css-color'\nBundle 'tpope/vim-haml'\nBundle 'kchmck/vim-coffee-script'\nBundle 'jelera/vim-javascript-syntax'\nBundle 'tpope/vim-endwise'\n\nBundle 'vim-scripts/tir_black'\nBundle 'bling/vim-airline'\n~~~\n\n##### `.vimrc`\n~~~ vim\nset nocompatible\n\nif filereadable( $HOME . '/.vimrc.bundle' )\n    source ~/.vimrc.bundle\nendif\n\n\" ...\n~~~\n"},"__N_SSG":true}