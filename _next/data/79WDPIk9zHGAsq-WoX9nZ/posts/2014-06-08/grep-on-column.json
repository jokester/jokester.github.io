{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2014/2014-06-08-grep-on-column.markdown","slug":["2014-06-08","grep-on-column"],"frontMatter":{"title":"grep on a column rather on line","publishAt":"2014-06-08"}},"mdContent":"\nOne may want to run grep-like operation on a specific column.\n\nFor example, when I need the lines from `/home/me/test.tsv` where the second column equals to `a`:\n\n    1\ta\t2.1\n    1\tb\t2.2\n    2\ta\t2.5\n    2\tc\t2.6\n\n`grep` does not come with an option to specify column.\nI don't want to break the lines into pieces or put pieces back, that's too much pain.\n\nThe trick is to use `join`. It performs join (recall relational algebra) on lines of 2 input files.\n\nExample:\n\n    % join -1 2 -2 1 -o 1.1,1.2,1.3 -t $'\\t' <(sort test --key=2) <(echo a)\n    1 a 2.1\n    2 a 2.5\n\nArguments explained:\n\n- `-1`, `-2`: which column to join on\n- `-o`: which columns to output (I had to specify all columns explicitly)\n- `-t`: column delimiter of input/output\n- `<(sort test --key=2)`: lines sorted by 2nd column\n- `<(echo a)`: just `a`\n\nBTW this join solution may be to some degree cleaner, but not much shorter than a perl one-liner:\n\n    % perl -ne '@cs=split;$cs[1] eq \"a\" and print;' < test\n\nand awk code is even shorter:\n\n    % awk '$2==\"a\"' < test\n"},"__N_SSG":true}