{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2017/2017-02-28-sha1-collision-and-apk-signing.md","slug":["2017-02-28","sha1-collision-and-apk-signing"],"frontMatter":{"title":"SHA1 Collision and Android APK Signing","publishAt":"2017-02-28"}},"mdContent":"\nAs a paranoiac Android developer, I was concerned by recent SHA1-collision news.\n\nAfter investigating it a bit, I am writing this as a FAQ to answer myself.\n\nIf you need more information, or want to share any ideas, feel free to drop me a comment.\n\n- toc\n  {:toc}\n\n# Why should I be concerned?\n\nSHA1 was used by default in APK signing for a few years.\nYou might be using it as either creator or consumer of APK files.\n\n# What is the worst case?\n\nA bad guy _may_ be able to create a APK with his/her malicious code, and identical SHA1 digest of your genuine files. Devices that had previous version will consider the crafted APK to be signed by _your_ certificate, and issue no warning when installing it.\n\n# Am I still (practically) safe?\n\nIMHO the answer is still yes in early 2017.\n\nIn the light side of the world, there are factors that may make actual attack difficult and unprofitable.\n\n- A collision is still expensive to find.\n- It may be more difficult to find collision for executable files like `.dex`.\n- APK may not be validated with SHA1 (see the following part).\n- A sane user may not install APK from untrusted origin (given that your Play Console account is not compromised).\n\nAnd this is the dark side:\n\n- Theoretically there is danger.\n- Things can change.\n- Android versions before 7.0 (N / SDK 24) , that have no great Signature schama v2, are inherently insecure due to downgrade attack.\n\n# How is SHA1 used in APK signing?\n\nSHA1 and its fellows is used in the `digest` part of `digest-and-sign` pattern of _digital signature_.\n\nThe digest function (MD5 / SHA1 / SHA256) and type of sign key (DSA / RSA / EC) constitutes a _Signature Algorithm_ like `SHA1withRSA` or `SHA256withEC`.\n\n## APK Signature scheme v1\n\nScheme v1 had a few other algorithms, but I'm afraid a vast majority used `SHA1withRSA`, it have been default of several tools.\n\n## APK Signature scheme v2\n\nScheme v2 always use SHA2 and up, and is thus safe against SHA1 collision.\n\n_But_ it is only supported since Android 7.0 (SDK level 24).\n\n# How is digest function determined for scheme V1?\n\n## `APKsign`\n\nThis is the up-to-date sign tool since Android build-tools v24.\n`APKsign` determines digest algorithm from key type and minimum SDK version of APK,\nso as to use SHA256 when possible.\n\n- `SHA256withRSA` for minimum SDK 18 (Android 4.3) and up\n- `SHA256withDSA` for minimum SDK 21 (Android 5.0) and up\n- `SHA256withEC` for minimum SDK 18 and up\n- `SHA1with*` for lower minimum SDK levels\n\nThe exact code can be found in `V1SchemeSigner.java` [here](https://android.googlesource.com/platform/tools/apksig/).\n\n## `jarsigner`\n\nThis is the outdated tool used before Android build-tools v24. It is distributed as a part of `JDK`. Android build tools uses it with `SHA1with*` by default.\n\n# Can I use both SHA1 and SHA256 in one APK?\n\nNo.\n\nAn APK that contain more than 1 signature will be rejected by Google Play.\n\n(similar thing can be done with `jar`, but google decided to reject such APKs)\n\n# Can I switch to SHA2?\n\nYes.\n\nThis can be done by setting minimum SDK to a higher value.\nHowever older devices will not be able to install your new APKs.\n\nPlease go on and read _why a simply switching is not enough_.\n\n# Is switching to SHA2 (completely) enough?\n\nNo.\n\n_/me sobs_\n\nIn a few devices I tested, Android installs new APK without warning, as long as it is signed with identical certificate of existing version.\n\nThis means older devices (that only checks scheme v1) is inherently vulenarble to a _downgrade attack_.\nOne can overwrite a `SHA256withRSA`-signed version with a `SHA1withRSA` APK (maybe made from an old version).\n\n# What can I do to maximize security?\n\nSign with SHA2, preferably with a new certificate that have not been used with SHA1.\n\n(We can publish separated APKs for Android 18 and up, see [multiple-APKs](https://developer.android.com/google/play/publishing/multiple-apks.html))\n"},"__N_SSG":true}