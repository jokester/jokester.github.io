{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2013/2013-12-29-debugging-ruby-with-pry.markdown","slug":["2013-12-29","debugging-ruby-with-pry"],"frontMatter":{"title":"Debugging ruby with pry and plugins","publishAt":"2013-12-29"}},"mdContent":"\n- toc\n{:toc}\n\n#### [pry](https://github.com/pry/pry/)\n\npry is a pretty and pretty good ruby console.\n\nIt can be used as a empowered `irb`, with TAB completion, code highlight and so on.\n\nBut its real use is to inspect execution of ruby code.\n\n~~~ ruby\n#!/usr/bin/env ruby\n# foo.rb\nrequire \"pry\"\nclass Foo\n  def bar x,y\n    binding.pry # block execution and start a pry console here\n  end\nend\nFoo.new.bar 1,2\n~~~\n\n~~~ shell\n% pry foo.rb\nFrom: (pry) @ line 6 Foo#bar:\n    5: def bar x,y\n => 6:   binding.pry # block execution and start a pry console here\n    7: end\n\n[1] pry(#<Foo>)> ls\nFoo#methods: bar\nlocals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_  x  y\n\n[2] pry(#<Foo>)> p x,y\n1\n2\n\n[3] pry(#<Foo>)>\n~~~\n\n#### pry-remote\n\nIn case rails process is started by a daemon process ([passenger](https://www.phusionpassenger.com/), [pow](http://pow.cx/) or alike),\nthe blocked process won't magically come into a console.\n\n[pry-remote](https://github.com/Mon-Ouie/pry-remote) provides a solution:\n\n- use `binding.pry_remote` to block execution and listen on `127.0.0.1:9876`\n- a CLI client `pry-remote`, which connects to `127.0.0.1:9876` and start pry\n\n#### pry-rails\n\n[pry-rails](https://github.com/rweng/pry-rails)\nlets you start `rails console` with pry.\n\nThe only work is adding `gem \"pry-rails\"` to `Gemfile`.\n\n#### pry-debugger\n\n[pry-debugger](https://github.com/nixme/pry-debugger)\nadds debug instructions to pry:\n\n- step\n- next\n- continue\n- finish\n\n**NOT** compatible with ruby 2.1 yet.\n\n#### [more pry plugins](https://github.com/pry/pry/wiki/Available-plugins)\n"},"__N_SSG":true}