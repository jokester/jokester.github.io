{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2017/2017-09-10-static-site-s3-custom-domain.md","slug":["2017-09-10","static-site-s3-custom-domain"],"frontMatter":{"title":"Static site with AWS S3 and custom domain","publishAt":"2017-09-10"}},"mdContent":"\nRecently I found that hosting a full-static site with AWS S3 is pretty much easy.\n\n- toc\n{:toc}\n\n### Necessary steps\n\n1. Create a S3 bucket, named after domain name\n    - I am using `s3.jokester.info` in this example.\n2. Enable `static website hosting` in bucket properties\n    - You will see an *Endpoint* URL in dialog of static website hosting. Remember it.\n3. Create a `CNAME` DNS record for the endpoint\n    - Example: in `jokester.info` domain, create a record with name of `s3` and value of `s3.jokester.info.s3-website-ap-northeast-1.amazonaws.com`.\n    - NOTE: the value should be the [host](https://en.wikipedia.org/wiki/URL#Syntax) part in endpoint URL, not all of it.\n\n### Unnecessary work\n\n- Setting a *Bucket Policy* (described in [Example: Setting up a Static Website Using a Custom Domain](http://docs.aws.amazon.com/AmazonS3/latest/dev/website-hosting-custom-domain-walkthrough.html)) is no longer required.\n\n### Optional: understanding index and error page\n\nI had difficulties understanding how index and error pages (configurable in Properties / Static website hosting) are used.\nAfter a few tries I believe it roughly works like:\n\n```python\n# assumptions:\n# - request URL is `http://BUCKET_ENDPOINT/obj`\n# - the bucket has a index document of `_index.html`, and error document of `_error.html`.\n\nif object \"/obj\" exists:\n    if object is publicly readable:\n        return that obj\n    else:\n        return 403\nelse if object \"/obj/_index.html\" exists:\n    if it is readable:\n        302 redirect to \"/obj/\" , and return _index.html for redirected path\n    else:\n        return 403\nelse if \"Everyone\" has \"List objects\" access in that bucket:\n    return 404\nelse:\n    return 403\n\n#for all 403/404 cases above, the \"_error.html\" will be returned if it exists\n```\n\n### Optional: enable https reverse-proxy in CloudFlare\n\nCloudFlare provides free https reverse-proxy for domains it manage. If you are already using CloudFlare DNS, enabling it should be effortless :)\n\nExample: [a file hosted by cloudflare + s3](https://s3.jokester.info/example.txt)\n\nNote that the S3 endpoint only serves http, we have to use `Flexible` SSL for the whole domain in CloudFlare.\n\nAlso, S3 and CloudClare can be used together for (unlimited) serverless http/https redirection (i.e. response 301 from AWS, and have CloudFlare serve in https).\n\n"},"__N_SSG":true}