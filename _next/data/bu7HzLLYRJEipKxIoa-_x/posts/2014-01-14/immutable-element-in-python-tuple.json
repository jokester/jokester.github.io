{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2014/2014-01-14-immutable-element-in-python-tuple.markdown","slug":["2014-01-14","immutable-element-in-python-tuple"],"frontMatter":{"title":"Immutable element in Python tuple","publishAt":"2014-01-14"}},"mdContent":"\n#### What\n\nI found a surprising fact today in [this SO post](http://stackoverflow.com/q/21105207/327815):\n`tuple` in Python turns out to be able to contain mutable objects (I was expecting that they cannot).\n\nSuch tuples are not hashable, because being hashable requires being recursively hashable and immutable.\nTherefore they *cannot* be used as key of `dict`.\n\n~~~ python\nIn [34]: a_tuple=({},)              # No problem\n\nIn [35]: a_tuple\nOut[35]: ({},)\n\nIn [36]: a_dict={ a_tuple: True }   # TypeError: unhashable type: 'dict'\n~~~\n\n#### Why\nThe same question was inquired in [this post](http://stackoverflow.com/questions/9755990/).\n\nTL;DR of [the direct answer]():\nsuch tuples maintains to be immutable because what it contains is *reference*,\nand reference to a particular object is not mutable.\n\nSo, immutability here means the tuple's shallow self won't be changing.\n\nLong answer from [python doc](http://docs.python.org/3.3/reference/datamodel.html#the-standard-type-hierarchy):\n\n>   Immutable sequences (Strings, Tuples, Bytes)\n>\n>     An object of an immutable sequence type cannot change once it is created. (If the object contains references to other objects, these other objects may be mutable and may be changed; however, the collection of objects directly referenced by an immutable object cannot change.)\n>\n>   Mutable sequences (Strings, Tuples, Bytes)\n>\n>     Mutable sequences can be changed after they are created. The subscription and slicing notations can be used as the target of assignment and del (delete) statements.\n\n#### More\n[Immutability in C# Part One: Kinds of Immutability](http://blogs.msdn.com/b/ericlippert/archive/2007/11/13/immutability-in-c-part-one-kinds-of-immutability.aspx) introduces more kinds of `mutability`.\n"},"__N_SSG":true}