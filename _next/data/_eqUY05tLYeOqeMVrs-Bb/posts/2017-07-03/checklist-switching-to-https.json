{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2017/2017-07-03-checklist-switching-to-https.md","slug":["2017-07-03","checklist-switching-to-https"],"frontMatter":{"title":"Checklist before Switching to HTTPS","publishAt":"2017-07-03"}},"mdContent":"\nThis is a memo before I switched all my services to https.\n\n- toc\n  {:toc}\n\n## User Experience\n\n### Browser support: can users still view my site?\n\n- _most_ browser support TLS 1.0 and up.\n- The only reason to enable SSL would be IE6 users `/bless`.\n\n### Content: (if https is supported at all) will users still see complete content?\n\nThis relates to how browser handles [mixed content](https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content),\nthe non-https resources in a https page.\n\n- `active mixed content` (e.g. `<script src=`) are blocked by most browsers\n  - FX 23 +\n  - IE 9 +\n  - Chrome\n- `passive mixed content` (e.g. `<img src=`)\n  - `<img>` loads with warning\n\n## Cost and Performance\n\nWill server experience high load and explode?\n\n### Breakdown of SSL overhead\n\nThe extra stuff browser and server have to do includes:\n\n- Session Establishment\n  - the part where client and server determines a encryption key for data transfer\n  - once per SSL session\n    - Some webservers support reuse of ssl session. nginx does.\n  - cipher negotiation ([cipher suite](https://en.wikipedia.org/wiki/Cipher_suite))\n  - asymmetric encryption, typically RSA\n    - simple benchmark: `openssl speed rsa`\n- After established: client and server exchange encrypted data\n  - the part where client and server flows encrypted data to each other\n  - symmetric encryption, typically AES\n    - nowdays CPUs have intrustion set to accelerate this\n    - simple benchmark: `openssl speed aes`\n\nA good illustration of SSL: [ssl-tls-handshake-overview](https://www.ssl.com/article/ssl-tls-handshake-overview/)\n\n### Estimation of overhead\n\nWe can use `openssl speed rsa aes` to estimate intensity and throughput of a server.\nIn my \\$5 vultr instance (1cpu / 1G mem / AES-NI supported), I am getting this result:\n\n```text\ntype             16 bytes     64 bytes    256 bytes   1024 bytes   8192 bytes\naes-128 cbc      92395.92k   101214.20k   102269.63k   227764.25k   226313.75k\naes-192 cbc      76020.25k    83423.61k    85446.95k   191443.81k   192688.75k\naes-256 cbc      67800.93k    71916.01k    72710.14k   159391.21k   165057.65k\n\n                  sign    verify    sign/s verify/s\nrsa  512 bits 0.000070s 0.000005s  14302.2 203856.8\nrsa 1024 bits 0.000193s 0.000013s   5183.6  79046.3\nrsa 2048 bits 0.000908s 0.000040s   1101.7  25136.7\nrsa 4096 bits 0.009625s 0.000149s    103.9   6691.5\n```\n\nThat means for my small-to-medium traffic sites, SSL overhead is not likely to exceed around 10% of CPU.\n\n## Tools\n\n- [SSL Server Test](https://www.ssllabs.com/ssltest/index.html) tells you what can be hardened further.\n\n## References\n\n- Usage statistics of SSL: [SSL Pulse](https://www.ssllabs.com/ssl-pulse/)\n- [SSL TLS Knowledge Center](https://www.owasp.org/index.php/SSL_TLS_Knowledge_Center)\n"},"__N_SSG":true}