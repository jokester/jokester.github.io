{"pageProps":{"mdMeta":{"realpath":"/home/runner/work/jokester.github.io/jokester.github.io/posts/2017/2017-09-01-pdf-creation-in-browser.md","slug":["2017-09-01","pdf-creation-in-browser"],"frontMatter":{"title":"PDF creation in browser","publishAt":"2017-09-01"}},"mdContent":"\nWhen working on a svg-based document viewer in browser, I had a chance to make a pdf-export feature.\nThis post is a memo about caveats and findings in my quest.\n\n- toc\n  {:toc}\n\n## Background\n\nA brief <!-- and NDA-compliant--> introduction of the viewer I work on:\n\n- A multipage document viewer running in browser.\n- Each page may have a background image in svg format.\n- Each page may have multiple vector annotations: text / circle / rect / handdrawn track.\n- Annotations can be edited on the fly, and get synchronized between connected clients.\n\n## How to create pdf in browser\n\nWe used 2 libraries:\n\n- [devongovett/pdfkit](https://github.com/devongovett/pdfkit) to create pdf blob\n- [alafr/SVG-to-PDFKit](https://github.com/alafr/SVG-to-PDFKit) to draw svg image to pdf\n\n### bundle pdfkit for browser use\n\n- pdfkit has a [How to compile PDFKit for use in the browser](https://github.com/devongovett/pdfkit/wiki/How-to-compile-PDFKit-for-use-in-the-browser) guide in `github/pdfkit` wiki.\n  - We did not take this way: use of `browserify coffeeify` would make our build (currently webpack only) more complicated.\n- Or, use a webpack-only solution\n  - in short: we resolve module dependencies with webpack `transform-loader`\n  - some dependicies (that exists in node but not browser) are taken from [bpampuch/pdfmake](https://github.com/bpampuch/pdfmake)\n  - see my [jokester/random-hack](https://github.com/jokester/random-hack/tree/master/pdfkit-webpack) repo for a minimal working example.\n\n### draw svg to pdf\n\n- We used [alafr/SVG-to-PDFKit](https://github.com/alafr/SVG-to-PDFKit)\n  - internally, this library traversals DOM of svg and draws equivalent vector image with `pdfkit`.\n  - If the svg input is a string, a pure js svg parser will be used to build a DOM.\n    - This should work in both browser and node\n    - _Caveat_: this svg parser _does not_ recognize svg strings start with `<?xml version=\"1.0\" encoding=\"UTF-8\">`. We have to strip this before passing it to `SVGtoPDF()`.\n    - _Note_: `style` attribute in svg string will not be intepreted. If your svg makes use of `style=`, you have to use `SVGElement` input and `useCSS` option. In that case SVG-to-PDFKit uses native `getComputedStyle` to have browser interprete the style.\n  - The svg input can also be a `SVGElement` object. Such objects can be obtained from `HTMLObjectElement#getSVGDocument()` `HTMLEmbedElement#getSVGDocument()` or [XMLHttpRequest](https://stackoverflow.com/a/14070928/327815).\n    - This likely requires a browser to work.\n    - _Caveat_: chrome may set incorrect prototype for native `SVGElement`, see [this issue](https://github.com/alafr/SVG-to-PDFKit/issues/47) for inspection and a workaround.\n\n### remove font data from pdfkit\n\n- pdfkit and dependencies have more than 1MB (almost not compressable) font data.\n- If you do not call `pdfDocument.text()`, they should be removed from JavaScript bundle.\n\n### draw not-in-font text to pdf\n\n### Browser compatibility\n\npdfkit needs some newer API to deal with binary data. Most browser (effectively everyone except IE) should work fine. The following list shows key features we needed.\n\n- `IE >= 9`:\n  - Canvas: for bitmap drawing\n  - CSS (2d) transform: zoom and scroll DOM element with a transform matrix\n- `IE >= 10`:\n  - Blob / ArrayBuffer / TypedArray: handle binary data in browser\n  - createObjectURL: can be used to cache arbitrary data (e.g. prefetched svg of all pages)\n    - Caveat: blob URLs in IE / Edge look like `blob:UUID`, and cannot be used as resource of object / embed elements.\n  - FileReader: read string or ArrayBuffer out of a Blob object\n\n### Reduce bundled size of pdfkit\n\n<!-- TODO -->\n\n## How to inspect / debug created pdf\n\n### By looking at pdf object\n\nThe Vector images are stored as _object_ in a pdf file.\nWe can read them after decoding them to textual form.\n\n- see [PDF Stream Objects](https://blog.didierstevens.com/2008/05/19/pdf-stream-objects/) for a brief introduction of encoded objects.\n- the decode can be done with `qpdf`: [example](https://stackoverflow.com/a/29474423/327815).\n\nReference:\n\n- [Understanding the PDF file format â€“ How Are Images Stored](https://blog.idrsolutions.com/2010/04/understanding-the-pdf-file-format-how-are-images-stored/)\n- [apache fop](https://xmlgraphics.apache.org/fop/) is able to [embed svg in its own xml scheme](https://xmlgraphics.apache.org/fop/dev/fo/embedding.fo.pdf), that can be exported to pdf with fop itself.\n- [itext/rups](https://github.com/itext/rups/) PDF Inspection tool\n\n### By converting to svg again\n\nWe can also convert pdf to svg again, to see if that is correct (I found it much easier to inspect text and DOM of svg).\n\n- `pdfcairo` can convert 1-paged pdf to svg: [example]()\n- `InkScape` should be able to do the same.\n\n## TypeScript - related stuff\n"},"__N_SSG":true}