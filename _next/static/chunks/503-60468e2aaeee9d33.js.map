{"version":3,"file":"static/chunks/503-60468e2aaeee9d33.js","mappings":"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","sources":["webpack://_N_E/./node_modules/extend/index.js","webpack://_N_E/./node_modules/inline-style-parser/index.js","webpack://_N_E/./node_modules/prop-types/factoryWithThrowingShims.js","webpack://_N_E/./node_modules/prop-types/index.js","webpack://_N_E/./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack://_N_E/./node_modules/react-is/cjs/react-is.production.min.js","webpack://_N_E/./node_modules/react-is/index.js","webpack://_N_E/./node_modules/style-to-object/index.js","webpack://_N_E/./node_modules/unified/node_modules/is-buffer/index.js","webpack://_N_E/./node_modules/vfile/node_modules/is-buffer/index.js","webpack://_N_E/./node_modules/decode-named-character-reference/index.dom.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://_N_E/./node_modules/micromark-factory-space/index.js","webpack://_N_E/./node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack://_N_E/./node_modules/micromark-util-character/index.js","webpack://_N_E/./node_modules/micromark-util-chunked/index.js","webpack://_N_E/./node_modules/micromark-util-classify-character/index.js","webpack://_N_E/./node_modules/micromark-util-combine-extensions/index.js","webpack://_N_E/./node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://_N_E/./node_modules/micromark-util-decode-string/index.js","webpack://_N_E/./node_modules/micromark-util-normalize-identifier/index.js","webpack://_N_E/./node_modules/micromark-util-resolve-all/index.js","webpack://_N_E/./node_modules/unist-util-stringify-position/index.js","webpack://_N_E/./node_modules/vfile-message/index.js","webpack://_N_E/./node_modules/vfile/lib/minpath.browser.js","webpack://_N_E/./node_modules/vfile/lib/minproc.browser.js","webpack://_N_E/./node_modules/vfile/lib/minurl.shared.js","webpack://_N_E/./node_modules/vfile/lib/minurl.browser.js","webpack://_N_E/./node_modules/vfile/lib/index.js","webpack://_N_E/./node_modules/bail/index.js","webpack://_N_E/./node_modules/unified/node_modules/is-plain-obj/index.js","webpack://_N_E/./node_modules/trough/index.js","webpack://_N_E/./node_modules/unified/lib/index.js","webpack://_N_E/./node_modules/mdast-util-to-string/index.js","webpack://_N_E/./node_modules/micromark/lib/initialize/content.js","webpack://_N_E/./node_modules/micromark/lib/initialize/document.js","webpack://_N_E/./node_modules/micromark-util-subtokenize/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/content.js","webpack://_N_E/./node_modules/micromark/lib/initialize/flow.js","webpack://_N_E/./node_modules/micromark/lib/initialize/text.js","webpack://_N_E/./node_modules/micromark/lib/create-tokenizer.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/list.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://_N_E/./node_modules/micromark-factory-destination/index.js","webpack://_N_E/./node_modules/micromark-factory-label/index.js","webpack://_N_E/./node_modules/micromark-factory-title/index.js","webpack://_N_E/./node_modules/micromark-factory-whitespace/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://_N_E/./node_modules/micromark-util-html-tag-name/index.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://_N_E/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://_N_E/./node_modules/micromark/lib/constructs.js","webpack://_N_E/./node_modules/micromark/lib/parse.js","webpack://_N_E/./node_modules/micromark/lib/preprocess.js","webpack://_N_E/./node_modules/micromark/lib/postprocess.js","webpack://_N_E/./node_modules/mdast-util-from-markdown/lib/index.js","webpack://_N_E/./node_modules/remark-parse/lib/index.js","webpack://_N_E/./node_modules/remark-parse/index.js","webpack://_N_E/./node_modules/unist-builder/index.js","webpack://_N_E/./node_modules/unist-util-visit/index.js","webpack://_N_E/./node_modules/unist-util-position/index.js","webpack://_N_E/./node_modules/unist-util-generated/index.js","webpack://_N_E/./node_modules/mdast-util-definitions/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/traverse.js","webpack://_N_E/./node_modules/micromark-util-sanitize-uri/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/wrap.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/footer.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/revert.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://_N_E/./node_modules/trim-lines/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://_N_E/./node_modules/mdast-util-to-hast/lib/index.js","webpack://_N_E/./node_modules/remark-rehype/lib/index.js","webpack://_N_E/./node_modules/property-information/lib/util/schema.js","webpack://_N_E/./node_modules/property-information/lib/util/merge.js","webpack://_N_E/./node_modules/property-information/lib/normalize.js","webpack://_N_E/./node_modules/property-information/lib/util/info.js","webpack://_N_E/./node_modules/property-information/lib/util/types.js","webpack://_N_E/./node_modules/property-information/lib/util/defined-info.js","webpack://_N_E/./node_modules/property-information/lib/util/create.js","webpack://_N_E/./node_modules/property-information/lib/xlink.js","webpack://_N_E/./node_modules/property-information/lib/xml.js","webpack://_N_E/./node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://_N_E/./node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://_N_E/./node_modules/property-information/lib/xmlns.js","webpack://_N_E/./node_modules/property-information/lib/aria.js","webpack://_N_E/./node_modules/property-information/lib/html.js","webpack://_N_E/./node_modules/property-information/lib/svg.js","webpack://_N_E/./node_modules/property-information/index.js","webpack://_N_E/./node_modules/react-markdown/lib/rehype-filter.js","webpack://_N_E/./node_modules/react-markdown/lib/uri-transformer.js","webpack://_N_E/./node_modules/hast-util-whitespace/index.js","webpack://_N_E/./node_modules/property-information/lib/find.js","webpack://_N_E/./node_modules/property-information/lib/hast-to-react.js","webpack://_N_E/./node_modules/space-separated-tokens/index.js","webpack://_N_E/./node_modules/comma-separated-tokens/index.js","webpack://_N_E/./node_modules/react-markdown/lib/ast-to-react.js","webpack://_N_E/./node_modules/react-markdown/lib/react-markdown.js","webpack://_N_E/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://_N_E/./node_modules/micromark-extension-gfm/index.js","webpack://_N_E/./node_modules/ccount/index.js","webpack://_N_E/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://_N_E/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-autolink-literal/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/association.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/track.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack://_N_E/./node_modules/mdast-util-gfm-footnote/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack://_N_E/./node_modules/mdast-util-gfm-strikethrough/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://_N_E/./node_modules/markdown-table/index.js","webpack://_N_E/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://_N_E/./node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://_N_E/./node_modules/mdast-util-gfm-task-list-item/index.js","webpack://_N_E/./node_modules/mdast-util-gfm/lib/index.js","webpack://_N_E/./node_modules/remark-gfm/index.js","webpack://_N_E/./node_modules/unist-util-is/index.js","webpack://_N_E/./node_modules/unist-util-visit-parents/color.browser.js","webpack://_N_E/./node_modules/unist-util-visit-parents/index.js","webpack://_N_E/<anon>"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * @license React\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=Symbol.for(\"react.element\"),c=Symbol.for(\"react.portal\"),d=Symbol.for(\"react.fragment\"),e=Symbol.for(\"react.strict_mode\"),f=Symbol.for(\"react.profiler\"),g=Symbol.for(\"react.provider\"),h=Symbol.for(\"react.context\"),k=Symbol.for(\"react.server_context\"),l=Symbol.for(\"react.forward_ref\"),m=Symbol.for(\"react.suspense\"),n=Symbol.for(\"react.suspense_list\"),p=Symbol.for(\"react.memo\"),q=Symbol.for(\"react.lazy\"),t=Symbol.for(\"react.offscreen\"),u;u=Symbol.for(\"react.module.reference\");\nfunction v(a){if(\"object\"===typeof a&&null!==a){var r=a.$$typeof;switch(r){case b:switch(a=a.type,a){case d:case f:case e:case m:case n:return a;default:switch(a=a&&a.$$typeof,a){case k:case h:case l:case q:case p:case g:return a;default:return r}}case c:return r}}}exports.ContextConsumer=h;exports.ContextProvider=g;exports.Element=b;exports.ForwardRef=l;exports.Fragment=d;exports.Lazy=q;exports.Memo=p;exports.Portal=c;exports.Profiler=f;exports.StrictMode=e;exports.Suspense=m;\nexports.SuspenseList=n;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return v(a)===h};exports.isContextProvider=function(a){return v(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return v(a)===l};exports.isFragment=function(a){return v(a)===d};exports.isLazy=function(a){return v(a)===q};exports.isMemo=function(a){return v(a)===p};\nexports.isPortal=function(a){return v(a)===c};exports.isProfiler=function(a){return v(a)===f};exports.isStrictMode=function(a){return v(a)===e};exports.isSuspense=function(a){return v(a)===m};exports.isSuspenseList=function(a){return v(a)===n};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===e||a===m||a===n||a===t||\"object\"===typeof a&&null!==a&&(a.$$typeof===q||a.$$typeof===p||a.$$typeof===g||a.$$typeof===h||a.$$typeof===l||a.$$typeof===u||void 0!==a.getModuleId)?!0:!1};exports.typeOf=v;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\n/**\n * Stringify one point, a position (start and end points), or a node’s\n * positional information.\n *\n * @param {Node|NodeLike|Position|Point|null} [value]\n * @returns {string}\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point|undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position|undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number|undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position|undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Reason for message.\n   *   Uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place at which the message occurred in a file.\n   * @param {string} [origin]\n   *   Place in code the message originates from (example `'my-package:my-rule-name'`)\n   */\n  constructor(reason, place, origin) {\n    /** @type {[string|null, string|null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`\n    this.name = stringifyPosition(place) || '1:1'\n    /** @type {string} */\n    this.message = typeof reason === 'object' ? reason.message : reason\n    /** @type {string} */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Whether this is a fatal problem that marks an associated file as no\n     * longer processable.\n     * If `true`, marks associated file as no longer processable.\n     * If `false`, necessitates a (potential) change.\n     * The value can also be `null` or `undefined`, for things that might not\n     * need changing.\n     *\n     * @type {boolean?}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number?}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number?}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full range information, when available.\n     * Has `start` and `end` fields, both set to an object with `line` and\n     * `column`, set to `number?`.\n     *\n     * @type {Position?}\n     */\n    this.position = position\n\n    /**\n     * Namespace of warning (example: `'my-package'`).\n     *\n     * @type {string?}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule-name'`).\n     *\n     * @type {string?}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the VFile ecosystem).\n     *\n     * @type {string?}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string?}\n     */\n    this.actual\n\n    /**\n     * Suggest values that should be used instead of `actual`, one or more\n     * values that are deemed as acceptable.\n     *\n     * @type {Array<string>?}\n     */\n    this.expected\n\n    /**\n     * Link to documentation for the message.\n     *\n     * @type {string?}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (supported by `vfile-reporter`).\n     *\n     * @type {string?}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * @param {string} path\n * @param {string} [ext]\n * @returns {string}\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * @param {string} path\n * @returns {string}\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean|undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * @param {Array<string>} segments\n * @returns {string}\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string|undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Note: `normalize` is not exposed as `path.normalize`, so some code is\n * manually removed from it.\n *\n * @param {string} path\n * @returns {string}\n */\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n * @param {boolean} allowAboveRoot\n * @returns {string}\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number|undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {string} path\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * @param {unknown} fileURLOrPath\n * @returns {fileURLOrPath is URL}\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileURLOrPath) {\n  return (\n    fileURLOrPath !== null &&\n    typeof fileURLOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileURLOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string|URL} path\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {Record<string, unknown> & {type: string, position?: Position|undefined}} NodeLike\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n *\n * @typedef {'ascii'|'utf8'|'utf-8'|'utf16le'|'ucs2'|'ucs-2'|'base64'|'base64url'|'latin1'|'binary'|'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *   This is a copy of the typing from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Value|Options|VFile|URL} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n * @property {Value} [value]\n * @property {string} [cwd]\n * @property {Array<string>} [history]\n * @property {string|URL} [path]\n * @property {string} [basename]\n * @property {string} [stem]\n * @property {string} [extname]\n * @property {string} [dirname]\n * @property {Data} [data]\n *\n * @typedef Map\n *   Raw source map, see:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n * @property {Array<string>} sources\n * @property {Array<string>} names\n * @property {string|undefined} [sourceRoot]\n * @property {Array<string>|undefined} [sourcesContent]\n * @property {string} mappings\n * @property {string} file\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration: a bunch of keys that will be shallow copied over to the new\n *   file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n * @typedef {<T = ReporterSettings>(files: Array<VFile>, options: T) => string} Reporter\n */\n\nimport buffer from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * If `options` is `string` or `Buffer`, it’s treated as `{value: options}`.\n   * If `options` is a `URL`, it’s treated as `{path: options}`.\n   * If `options` is a `VFile`, shallow copies its data over to the new file.\n   * All fields in `options` are set on the newly created `VFile`.\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * It’s not possible to set either `dirname` or `extname` without setting\n   * either `history`, `path`, `basename`, or `stem` as well.\n   *\n   * @param {Compatible} [value]\n   */\n  constructor(value) {\n    /** @type {Options} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      // @ts-expect-error Looks like a buffer.\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      // @ts-expect-error Looks like file or options.\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     * The first is the original path and the last is the current path.\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     * This is used by vfile reporters.\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Sometimes files have a non-string, compiled, representation.\n     * This can be stored in the `result` field.\n     * One example is when turning markdown into React nodes.\n     * This is used by unified to store non-string results.\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Sometimes files have a source map associated with them.\n     * This can be stored in the `map` field.\n     * This should be a `Map` type, which is equivalent to the `RawSourceMap`\n     * type from the `source-map` module.\n     * @type {Map|undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (prop in options && options[prop] !== undefined) {\n        // @ts-expect-error: TS is confused by the different types for `history`.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) this[prop] = options[prop]\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   * @param {string|URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding} [encoding='utf8']\n   *   When `value` is a `Buffer`, `encoding` is a character encoding to\n   *   understand it as (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding)\n  }\n\n  /**\n   * Constructs a new `VFileMessage`, where `fatal` is set to `false`, and\n   * associates it with the file by adding it to `vfile.messages` and setting\n   * `message.file` to the current filepath.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates an informational message where\n   * `fatal` is set to `null`.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Like `VFile#message()`, but associates a fatal message where `fatal` is\n   * set to `true`, and then immediately throws it.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string|Error|VFileMessage} reason\n   *   Human readable reason for the message, uses the stack and message of the error if given.\n   * @param {Node|NodeLike|Position|Point} [place]\n   *   Place where the message occurred in the file.\n   * @param {string} [origin]\n   *   Computer readable reason for the message\n   * @returns {never}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {void}\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string|undefined} part\n * @param {string} name\n * @returns {asserts part is string}\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string|undefined} path\n * @param {string} name\n * @returns {asserts path is string}\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n *\n * @typedef {UnistParent & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @typedef _CompileDataFields\n * @property {boolean|undefined} expectingFirstListItemValue\n * @property {boolean|undefined} flowCodeInside\n * @property {boolean|undefined} setextHeadingSlurpLineEnding\n * @property {boolean|undefined} atHardBreak\n * @property {'collapsed'|'full'} referenceType\n * @property {boolean|undefined} inReference\n * @property {'characterReferenceMarkerHexadecimal'|'characterReferenceMarkerNumeric'} characterReferenceType\n *\n * @typedef {Record<string, unknown> & Partial<_CompileDataFields>} CompileData\n *\n * @typedef {(tree: Root) => Root|void} Transform\n * @typedef {(this: CompileContext, token: Token) => void} Handle\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n * @typedef {Record<string, Record<string, unknown>|Array<unknown>> & {canContainEols: Array<string>, transforms: Array<Transform>, enter: Handles, exit: Handles}} NormalizedExtension\n * @typedef {Partial<NormalizedExtension>} Extension\n *   An mdast extension changes how markdown tokens are turned into mdast.\n *\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token|undefined, right: Token) => void} OnEnterError\n * @typedef {(this: Omit<CompileContext, 'sliceSerialize'>, left: Token, right: Token) => void} OnExitError\n *\n * @typedef CompileContext\n *   mdast compiler context\n * @property {Array<Node | Fragment>} stack\n * @property {Array<[Token, OnEnterError|undefined]>} tokenStack\n * @property {(key: string, value?: unknown) => void} setData\n *   Set data into the key-value store.\n * @property {<K extends string>(key: K) => CompileData[K]} getData\n *   Get data from the key-value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<N extends Node>(this: CompileContext, node: N, token: Token, onError?: OnEnterError) => N} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {NormalizedExtension} config\n *   Configuration.\n *\n * @typedef {{mdastExtensions?: Array<Extension|Array<Extension>>}} FromMarkdownOptions\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n */\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n/**\n * @param value Markdown to parse (`string` or `Buffer`).\n * @param [encoding] Character encoding to understand `value` as when it’s a `Buffer` (`string`, default: `'utf8'`).\n * @param [options] Configuration\n */\n\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options) => Root) &\n   *   ((value: Value, options?: Options) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding} [encoding]\n   * @param {Options} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options} [options]\n */\n\nfunction compiler(options = {}) {\n  /** @type {NormalizedExtension} */\n  // @ts-expect-error: our base has all required fields, so the result will too.\n  const config = configure(\n    {\n      transforms: [],\n      canContainEols: [\n        'emphasis',\n        'fragment',\n        'heading',\n        'paragraph',\n        'strong'\n      ],\n      enter: {\n        autolink: opener(link),\n        autolinkProtocol: onenterdata,\n        autolinkEmail: onenterdata,\n        atxHeading: opener(heading),\n        blockQuote: opener(blockQuote),\n        characterEscape: onenterdata,\n        characterReference: onenterdata,\n        codeFenced: opener(codeFlow),\n        codeFencedFenceInfo: buffer,\n        codeFencedFenceMeta: buffer,\n        codeIndented: opener(codeFlow, buffer),\n        codeText: opener(codeText, buffer),\n        codeTextData: onenterdata,\n        data: onenterdata,\n        codeFlowValue: onenterdata,\n        definition: opener(definition),\n        definitionDestinationString: buffer,\n        definitionLabelString: buffer,\n        definitionTitleString: buffer,\n        emphasis: opener(emphasis),\n        hardBreakEscape: opener(hardBreak),\n        hardBreakTrailing: opener(hardBreak),\n        htmlFlow: opener(html, buffer),\n        htmlFlowData: onenterdata,\n        htmlText: opener(html, buffer),\n        htmlTextData: onenterdata,\n        image: opener(image),\n        label: buffer,\n        link: opener(link),\n        listItem: opener(listItem),\n        listItemValue: onenterlistitemvalue,\n        listOrdered: opener(list, onenterlistordered),\n        listUnordered: opener(list),\n        paragraph: opener(paragraph),\n        reference: onenterreference,\n        referenceString: buffer,\n        resourceDestinationString: buffer,\n        resourceTitleString: buffer,\n        setextHeading: opener(heading),\n        strong: opener(strong),\n        thematicBreak: opener(thematicBreak)\n      },\n      exit: {\n        atxHeading: closer(),\n        atxHeadingSequence: onexitatxheadingsequence,\n        autolink: closer(),\n        autolinkEmail: onexitautolinkemail,\n        autolinkProtocol: onexitautolinkprotocol,\n        blockQuote: closer(),\n        characterEscapeValue: onexitdata,\n        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n        characterReferenceValue: onexitcharacterreferencevalue,\n        codeFenced: closer(onexitcodefenced),\n        codeFencedFence: onexitcodefencedfence,\n        codeFencedFenceInfo: onexitcodefencedfenceinfo,\n        codeFencedFenceMeta: onexitcodefencedfencemeta,\n        codeFlowValue: onexitdata,\n        codeIndented: closer(onexitcodeindented),\n        codeText: closer(onexitcodetext),\n        codeTextData: onexitdata,\n        data: onexitdata,\n        definition: closer(),\n        definitionDestinationString: onexitdefinitiondestinationstring,\n        definitionLabelString: onexitdefinitionlabelstring,\n        definitionTitleString: onexitdefinitiontitlestring,\n        emphasis: closer(),\n        hardBreakEscape: closer(onexithardbreak),\n        hardBreakTrailing: closer(onexithardbreak),\n        htmlFlow: closer(onexithtmlflow),\n        htmlFlowData: onexitdata,\n        htmlText: closer(onexithtmltext),\n        htmlTextData: onexitdata,\n        image: closer(onexitimage),\n        label: onexitlabel,\n        labelText: onexitlabeltext,\n        lineEnding: onexitlineending,\n        link: closer(onexitlink),\n        listItem: closer(),\n        listOrdered: closer(),\n        listUnordered: closer(),\n        paragraph: closer(),\n        referenceString: onexitreferencestring,\n        resourceDestinationString: onexitresourcedestinationstring,\n        resourceTitleString: onexitresourcetitlestring,\n        resource: onexitresource,\n        setextHeading: closer(onexitsetextheading),\n        setextHeadingLineSequence: onexitsetextheadinglinesequence,\n        setextHeadingText: onexitsetextheadingtext,\n        strong: closer(),\n        thematicBreak: closer()\n      }\n    },\n    options.mdastExtensions || []\n  )\n  /** @type {CompileData} */\n\n  const data = {}\n  return compile\n  /**\n   * @param {Array<Event>} events\n   * @returns {Root}\n   */\n\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {CompileContext['stack']} */\n\n    const stack = [tree]\n    /** @type {CompileContext['tokenStack']} */\n\n    const tokenStack = []\n    /** @type {Array<number>} */\n\n    const listStack = []\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n\n    const context = {\n      stack,\n      tokenStack,\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    if (tokenStack.length > 0) {\n      const tail = tokenStack[tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    } // Figure out `root` position.\n\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n    index = -1\n\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token|undefined} */\n\n    let listItem\n    /** @type {number|undefined} */\n\n    let lineIndex\n    /** @type {number|undefined} */\n\n    let firstBlankLineIndex\n    /** @type {boolean|undefined} */\n\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          } // Fix position.\n\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        } // Create a new list item.\n\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          } // @ts-expect-error: `listItem` is most definitely defined, TS...\n\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    } // @ts-expect-error Patched.\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n  /**\n   * @type {CompileContext['setData']}\n   * @param [value]\n   */\n\n  function setData(key, value) {\n    data[key] = value\n  }\n  /**\n   * @type {CompileContext['getData']}\n   * @template {string} K\n   * @param {K} key\n   * @returns {CompileData[K]}\n   */\n\n  function getData(key) {\n    return data[key]\n  }\n  /**\n   * @param {Point} d\n   * @returns {Point}\n   */\n\n  function point(d) {\n    return {\n      line: d.line,\n      column: d.column,\n      offset: d.offset\n    }\n  }\n  /**\n   * @param {(token: Token) => Node} create\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function opener(create, and) {\n    return open\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n  /** @type {CompileContext['buffer']} */\n\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n  /**\n   * @type {CompileContext['enter']}\n   * @template {Node} N\n   * @this {CompileContext}\n   * @param {N} node\n   * @param {Token} token\n   * @param {OnEnterError} [errorHandler]\n   * @returns {N}\n   */\n\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler]) // @ts-expect-error: `end` will be patched later.\n\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n  /**\n   * @param {Handle} [and]\n   * @returns {Handle}\n   */\n\n  function closer(and) {\n    return close\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n  /**\n   * @type {CompileContext['exit']}\n   * @this {CompileContext}\n   * @param {Token} token\n   * @param {OnExitError} [onExitError]\n   * @returns {Node}\n   */\n\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    node.position.end = point(token.end)\n    return node\n  }\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n\n  function resume() {\n    return toString(this.stack.pop())\n  } //\n  // Handlers.\n  //\n\n  /** @type {Handle} */\n\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n  /** @type {Handle} */\n\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor =\n        /** @type {List} */\n        this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n  /** @type {Handle} */\n\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n  /** @type {Handle} */\n\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node =\n      /** @type {Code} */\n      this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitionlabelstring(token) {\n    // Discard label, use the source content instead.\n    const label = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Definition} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitatxheadingsequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheadinglinesequence(token) {\n    const node =\n      /** @type {Heading} */\n      this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n  /** @type {Handle} */\n\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n  /** @type {Handle} */\n\n  function onenterdata(token) {\n    const parent =\n      /** @type {Parent} */\n      this.stack[this.stack.length - 1]\n    /** @type {Node} */\n\n    let tail = parent.children[parent.children.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text() // @ts-expect-error: we’ll add `end` later.\n\n      tail.position = {\n        start: point(token.start)\n      } // @ts-expect-error: Assume `parent` accepts `text`.\n\n      parent.children.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n  /** @type {Handle} */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n  /** @type {Handle} */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n  /** @type {Handle} */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node =\n      /** @type {HTML} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node =\n      /** @type {InlineCode} */\n      this.stack[this.stack.length - 1]\n    node.value = data\n  }\n  /** @type {Handle} */\n\n  function onexitlink() {\n    const context =\n      /** @type {Link & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitimage() {\n    const context =\n      /** @type {Image & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // To do: clean.\n\n    if (getData('inReference')) {\n      context.type += 'Reference' // @ts-expect-error: mutate.\n\n      context.referenceType = getData('referenceType') || 'shortcut' // @ts-expect-error: mutate.\n\n      delete context.url\n      delete context.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete context.identifier // @ts-expect-error: mutate.\n\n      delete context.label\n    }\n\n    setData('referenceType')\n  }\n  /** @type {Handle} */\n\n  function onexitlabeltext(token) {\n    const ancestor =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 2]\n    const string = this.sliceSerialize(token)\n    ancestor.label = decodeString(string)\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n  /** @type {Handle} */\n\n  function onexitlabel() {\n    const fragment =\n      /** @type {Fragment} */\n      this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node =\n      /** @type {(Link|Image) & {identifier: string, label: string}} */\n      this.stack[this.stack.length - 1] // Assume a reference.\n\n    setData('inReference', true)\n\n    if (node.type === 'link') {\n      // @ts-expect-error: Assume static phrasing content.\n      node.children = fragment.children\n    } else {\n      node.alt = value\n    }\n  }\n  /** @type {Handle} */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.url = data\n  }\n  /** @type {Handle} */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node =\n      /** @type {Link|Image} */\n      this.stack[this.stack.length - 1]\n    node.title = data\n  }\n  /** @type {Handle} */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n  /** @type {Handle} */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n  /** @type {Handle} */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node =\n      /** @type {LinkReference|ImageReference} */\n      this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n  /** @type {Handle} */\n\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      // @ts-expect-error `decodeNamedCharacterReference` can return false for\n      // invalid named character references, but everything we’ve tokenized is\n      // valid.\n      value = decodeNamedCharacterReference(data)\n    }\n\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n  /** @type {Handle} */\n\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node =\n      /** @type {Link} */\n      this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  } //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n  /** @returns {Code} */\n\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n  /** @returns {InlineCode} */\n\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n  /** @returns {Definition} */\n\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n  /** @returns {Emphasis} */\n\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n  /** @returns {Heading} */\n\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n  /** @returns {Break} */\n\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n  /** @returns {HTML} */\n\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n  /** @returns {Image} */\n\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n  /** @returns {Link} */\n\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n  /** @returns {Paragraph} */\n\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n  /** @returns {Strong} */\n\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n  /** @returns {Text} */\n\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n  /** @returns {ThematicBreak} */\n\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n/**\n * @param {Extension} combined\n * @param {Array<Extension|Array<Extension>>} extensions\n * @returns {Extension}\n */\n\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n\n  return combined\n}\n/**\n * @param {Extension} combined\n * @param {Extension} extension\n * @returns {void}\n */\n\nfunction extension(combined, extension) {\n  /** @type {string} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      const list = key === 'canContainEols' || key === 'transforms'\n      const maybe = own.call(combined, key) ? combined[key] : undefined\n      /* c8 ignore next */\n\n      const left = maybe || (combined[key] = list ? [] : {})\n      const right = extension[key]\n\n      if (right) {\n        if (list) {\n          // @ts-expect-error: `left` is an array.\n          combined[key] = [...left, ...right]\n        } else {\n          Object.assign(left, right)\n        }\n      }\n    }\n  }\n}\n/** @type {OnEnterError} */\n\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist').Literal} Literal\n * @typedef {Object.<string, unknown>} Props\n * @typedef {Array.<Node>|string} ChildrenOrValue\n *\n * @typedef {(<T extends string, P extends Record<string, unknown>, C extends Node[]>(type: T, props: P, children: C) => {type: T, children: C} & P)} BuildParentWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P, value: string) => {type: T, value: string} & P)} BuildLiteralWithProps\n * @typedef {(<T extends string, P extends Record<string, unknown>>(type: T, props: P) => {type: T} & P)} BuildVoidWithProps\n * @typedef {(<T extends string, C extends Node[]>(type: T, children: C) => {type: T, children: C})} BuildParent\n * @typedef {(<T extends string>(type: T, value: string) => {type: T, value: string})} BuildLiteral\n * @typedef {(<T extends string>(type: T) => {type: T})} BuildVoid\n */\n\nexport var u = /**\n * @type {BuildVoid & BuildVoidWithProps & BuildLiteral & BuildLiteralWithProps & BuildParent & BuildParentWithProps}\n */ (\n  /**\n   * @param {string} type Type of node\n   * @param {Props|ChildrenOrValue} [props] Additional properties for node (or `children` or `value`)\n   * @param {ChildrenOrValue} [value] `children` or `value` of node\n   * @returns {Node}\n   */\n  function (type, props, value) {\n    /** @type {Node} */\n    var node = {type: String(type)}\n\n    if (\n      (value === undefined || value === null) &&\n      (typeof props === 'string' || Array.isArray(props))\n    ) {\n      value = props\n    } else {\n      Object.assign(node, props)\n    }\n\n    if (Array.isArray(value)) {\n      node.children = value\n    } else if (value !== undefined && value !== null) {\n      node.value = String(value)\n    }\n\n    return node\n  }\n)\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor} visitor\n     * @param {boolean} [reverse]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {Record<string, unknown> & {type: string, position?: PositionLike|undefined}} NodeLike\n * @typedef {import('unist').Point} Point\n *\n * @typedef {Partial<Point>} PointLike\n *\n * @typedef PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n */\n\nexport const pointStart = point('start')\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike|Node} [node]\n * @returns {Position}\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start'|'end'} type\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the positional info of `node`.\n   *\n   * @param {NodeLike|Node} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    return {\n      line: point.line || null,\n      column: point.column || null,\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {Object} PointLike\n * @property {number} [line]\n * @property {number} [column]\n * @property {number} [offset]\n *\n * @typedef {Object} PositionLike\n * @property {PointLike} [start]\n * @property {PointLike} [end]\n *\n * @typedef {Object} NodeLike\n * @property {PositionLike} [position]\n */\n\n/**\n * Check if `node` is *generated*.\n *\n * @param {NodeLike} [node]\n * @returns {boolean}\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast').Definition} Definition\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `node`.\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} node\n */\nexport function definitions(node) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!node || !node.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(node, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /**\n   * Get a node from the bound definition cache.\n   *\n   * @param {string} identifier\n   * @returns {Definition|null}\n   */\n  function definition(identifier) {\n    const id = clean(identifier)\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('./index.js').H} H\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n * @returns {Element|null}\n */\nexport function footer(h) {\n  let index = -1\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n\n  while (++index < h.footnoteOrder.length) {\n    const def = h.footnoteById[h.footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const content = all(h, def)\n    const id = String(def.identifier)\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= h.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            h.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: h.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: h.clobberPrefix + 'fn-' + safeId},\n      children: wrap(content, true)\n    }\n\n    if (def.position) {\n      listItem.position = def.position\n    }\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: h.footnoteLabelTagName,\n        properties: {\n          ...JSON.parse(JSON.stringify(h.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [u('text', h.footnoteLabel)]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const id = String(node.identifier)\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = h.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    h.footnoteOrder.push(id)\n    h.footnoteCounts[id] = 1\n    counter = h.footnoteOrder.length\n  } else {\n    h.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = h.footnoteCounts[id]\n\n  return h(node, 'sup', [\n    h(\n      node.position,\n      'a',\n      {\n        href: '#' + h.clobberPrefix + 'fn-' + safeId,\n        id:\n          h.clobberPrefix +\n          'fnref-' +\n          safeId +\n          (reuseCounter > 1 ? '-' + reuseCounter : ''),\n        dataFootnoteRef: true,\n        ariaDescribedBy: 'footnote-label'\n      },\n      [u('text', String(counter))]\n    )\n  ])\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n *\n * @todo\n *   `footnote` (or “inline note”) are a pandoc footnotes feature (`^[a note]`)\n *   that does not exist in GFM.\n *   We still have support for it, so that things remain working with\n *   `micromark-extension-footnote` and `mdast-util-footnote`, but in the future\n *   we might be able to remove it?\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalizeUri(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    /** @type {Array<Content>} */\n    const out = []\n    let cellIndex = -1\n    const length = node.align ? align.length : row.length\n\n    while (++cellIndex < length) {\n      const cell = row[cellIndex]\n      out.push(\n        h(cell, name, {align: align[cellIndex]}, cell ? all(h, cell) : [])\n      )\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {trimLines} from 'trim-lines'\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(node, u('text', trimLines(String(node.value))))\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName]\n *   Defines the tag name of an element.\n * @property {Properties} [hProperties]\n *   Defines the properties of an element.\n * @property {Array<Content>} [hChildren]\n *   Defines the (hast) children of an element.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} Data\n *   unist data with embedded hast fields.\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData\n *   unist node with embedded hast data.\n *\n * @callback Handler\n *   Handle a node.\n * @param {H} h\n *   Handle context.\n * @param {any} node\n *   mdast node to handle.\n * @param {Parent|null} parent\n *   Parent of `node`.\n * @returns {Content|Array<Content>|null|undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Properties} props\n *   Properties.\n * @param {Array<Content>?} [children]\n *   hast content.\n * @returns {Element}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<Content>?} [children]\n *   hast content\n * @returns {Element}\n *   Compiled element.\n *\n * @typedef HFields\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {Properties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use to go back to a footnote call from the footnote section.\n * @property {(identifier: string) => Definition|null} definition\n *   Definition cache.\n * @property {Record<string, FootnoteDefinition>} footnoteById\n *   Footnote cache.\n * @property {Array<string>} footnoteOrder\n *   Order in which footnotes occur.\n * @property {Record<string, number>} footnoteCounts\n *   Counts the same footnote was used.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment\n *   Like `h` but lower-level and usable on non-elements.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [allowDangerousHtml=false]\n *   Whether to allow `html` nodes and inject them as `raw` HTML.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute to prevent it from *clobbering*.\n *   attributes.\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=x></p>\n *   <script>alert(x)</script>\n *   ```\n *\n *   Elements by their ID are made available in browsers on the `window` object.\n *   Using a prefix prevents this from being a problem.\n * @property {string} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {string} [footnoteLabelTagName='h2']\n *   HTML tag to use for the footnote label.\n *   Can be changed to match your document structure and play well with your choice of css.\n * @property {Properties} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label.\n *   A 'sr-only' class is added by default to hide this from sighted users.\n *   Change it to make the label visible, or add classes for other purposes.\n * @property {string} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call.\n *   Affects screen reader users.\n *   Change it if you’re authoring in a different language.\n * @property {Handlers} [handlers]\n *   Object mapping mdast nodes to functions handling them\n * @property {Array<string>} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H\n *   Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Turn mdast into hast.\n *\n * @param {MdastNode} tree\n *   mdast node.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {H}\n *   `h` function.\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  h.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  h.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  h.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  h.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  h.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  h.footnoteCounts = {}\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n\nexport {handlers as defaultHandlers} from './handlers/index.js'\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @param {unknown} thing\n * @returns {boolean}\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  var value =\n    // @ts-ignore looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-ignore looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://html.spec.whatwg.org/#space-character>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && options.transformLinkUri) {\n    properties.href = options.transformLinkUri(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {uriTransformer} from './uri-transformer.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'plugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.defaultProps = {transformLinkUri: uriTransformer}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Test} [ignore]\n *   `unist-util-is` test used to assert parents\n *\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {Content|Root} Node\n * @typedef {Exclude<Extract<Node, import('mdast').Parent>, Root>} Parent\n *\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n * @property {[Root, ...Array<Parent>, Text]} stack\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array<PhrasingContent>|PhrasingContent|string|false|undefined|null}\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param tree mdast tree\n * @param find Value to find and remove. When `string`, escaped and made into a global `RegExp`\n * @param [replace] Value to insert.\n *   * When `string`, turned into a Text node.\n *   * When `Function`, called with the results of calling `RegExp.exec` as\n *     arguments, in which case it can return a single or a list of `Node`,\n *     a `string` (which is wrapped in a `Text` node), or `false` to not replace\n * @param [options] Configuration.\n */\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   ((tree: Node, find: Find, replace?: Replace, options?: Options) => Node) &\n   *   ((tree: Node, schema: FindAndReplaceSchema|FindAndReplaceList, options?: Options) => Node)\n   * )}\n   **/\n  (\n    /**\n     * @param {Node} tree\n     * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n     * @param {Replace|Options} [replace]\n     * @param {Options} [options]\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent|undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = /** @type {Parent} */ (parents[index])\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error mdast vs. unist parent.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          // @ts-expect-error: stack is fine.\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * @param {Text} node\n       * @param {[Root, ...Array<Parent>]} parents\n       * @returns {VisitorResult}\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n        /** @type {number|undefined} */\n        let position\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').Association} Association\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another: controversially,\n * character escapes and references don’t work in this matching: `&copy;` does\n * not match `©`, and `\\+` does not match `+`.\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character escapes\n * and all character references.\n *\n * @param {Association} node\n * @returns {string}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Join} Join\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {TrackFields} safeOptions\n * @returns {string}\n */\nexport function containerFlow(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  const tracker = track(safeOptions)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      context.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1])))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n\n  /**\n   * @param {Node} left\n   * @param {Node} right\n   * @returns {string}\n   */\n  function between(left, right) {\n    let index = context.join.length\n\n    while (index--) {\n      const result = context.join[index](left, right, parent, context)\n\n      if (result === true || result === 1) {\n        break\n      }\n\n      if (typeof result === 'number') {\n        return '\\n'.repeat(1 + result)\n      }\n\n      if (result === false) {\n        return '\\n\\n<!---->\\n\\n'\n      }\n    }\n\n    return '\\n\\n'\n  }\n}\n","/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<string>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<string>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (!list) {\n    return none\n  }\n\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * @param {Context} context\n * @param {string|null|undefined} input\n * @param {SafeOptions & {encode?: Array<string>}} config\n * @returns {string}\n */\nexport function safe(context, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < context.unsafe.length) {\n    const pattern = context.unsafe[index]\n\n    if (!patternInScope(context.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray|null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/**\n * @returns {FromMarkdownExtension}\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinition(token) {\n    this.enter(\n      {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n      token\n    )\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinitionLabelString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinitionLabelString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinition(token) {\n    this.exit(token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCall(token) {\n    this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCallString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCallString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCall(token) {\n    this.exit(token)\n  }\n}\n\n/**\n * @returns {ToMarkdownExtension}\n */\nexport function gfmFootnoteToMarkdown() {\n  footnoteReference.peek = footnoteReferencePeek\n\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteReference} node\n   */\n  function footnoteReference(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteReference')\n    const subexit = context.enter('reference')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    exit()\n    value += tracker.move(']')\n    return value\n  }\n\n  /** @type {ToMarkdownHandle} */\n  function footnoteReferencePeek() {\n    return '['\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteDefinition')\n    const subexit = context.enter('label')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    value += tracker.move(\n      ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n    )\n    tracker.shift(4)\n    value += tracker.move(\n      indentLines(containerFlow(node, context, tracker.current()), map)\n    )\n    exit()\n\n    return value\n\n    /** @type {Map} */\n    function map(line, index, blank) {\n      if (index) {\n        return (blank ? '' : '    ') + line\n      }\n\n      return line\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n  let tracker = track(safeOptions)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = track(safeOptions)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethroughs. So they sort of cancel each other out.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/c47743b/lib/unsafe.js#L11>\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {ToMarkdownExtension} */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\nhandleDelete.peek = peekDelete\n\n/** @type {FromMarkdownHandle} */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('emphasis')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, import('mdast').Parent>} Parent\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent|undefined} _\n * @param {Context} context\n * @returns {string}\n */\nexport function inlineCode(node, _, context) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < context.unsafe.length) {\n    const pattern = context.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray|null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n *\n * @typedef Options\n * @property {boolean} [tableCellPadding=true]\n * @property {boolean} [tablePipeAlign=true]\n * @property {MarkdownTableOptions['stringLength']} [stringLength]\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterTable(token) {\n  /** @type {Array<'left'|'right'|'center'|'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/** @type {FromMarkdownHandle} */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      // @ts-expect-error: fixed in `markdown-table@3.0.1`.\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    // `markdown-table` will always add an align row\n    const value = serializeData([row])\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string>} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      alignDelimiters,\n      padding,\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['bullet'], undefined>}\n */\nexport function checkBullet(context) {\n  const marker = context.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['listItemIndent'], undefined>}\n */\nexport function checkListItemIndent(context) {\n  const style = context.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../util/indent-lines.js').Map} Map\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {Root|Content} Node\n * @typedef {Extract<Node, import('mdast').Parent>} Parent\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\nimport {containerFlow} from '../util/container-flow.js'\nimport {indentLines} from '../util/indent-lines.js'\nimport {track} from '../util/track.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent|undefined} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function listItem(node, parent, context, safeOptions) {\n  const listItemIndent = checkListItemIndent(context)\n  let bullet = context.bulletCurrent || checkBullet(context)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (context.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = track(safeOptions)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = context.enter('listItem')\n  const value = indentLines(\n    containerFlow(node, context, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */ (this.stack[this.stack.length - 2])\n  const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else if (\n        node.position &&\n        head.position &&\n        typeof head.position.start.offset === 'number'\n      ) {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-gfm-table').Options} Options\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * @returns {Array<FromMarkdownExtension>}\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n *\n * @typedef {string} Type\n * @typedef {Object<string, unknown>} Props\n *\n * @typedef {null|undefined|Type|Props|TestFunctionAnything|Array.<Type|Props|TestFunctionAnything>} Test\n */\n\n/**\n * Check if a node passes a test\n *\n * @callback TestFunctionAnything\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean|void}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} X\n * @callback TestFunctionPredicate\n * @param {Node} node\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is X}\n */\n\n/**\n * @callback AssertAnything\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {boolean}\n */\n\n/**\n * Check if a node passes a certain node test\n *\n * @template {Node} Y\n * @callback AssertPredicate\n * @param {unknown} [node]\n * @param {number|null|undefined} [index]\n * @param {Parent|null|undefined} [parent]\n * @returns {node is Y}\n */\n\nexport const is =\n  /**\n   * Check if a node passes a test.\n   * When a `parent` node is known the `index` of node should also be given.\n   *\n   * @type {(\n   *   (<T extends Node>(node: unknown, test: T['type']|Partial<T>|TestFunctionPredicate<T>|Array.<T['type']|Partial<T>|TestFunctionPredicate<T>>, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => node is T) &\n   *   ((node?: unknown, test?: Test, index?: number|null|undefined, parent?: Parent|null|undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * Check if a node passes a test.\n     * When a `parent` node is known the `index` of node should also be given.\n     *\n     * @param {unknown} [node] Node to check\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @param {number|null|undefined} [index] Position of `node` in `parent`\n     * @param {Parent|null|undefined} [parent] Parent of `node`\n     * @param {unknown} [context] Context object to invoke `test` with\n     * @returns {boolean} Whether test passed and `node` is a `Node` (object with `type` set to non-empty `string`).\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\nexport const convert =\n  /**\n   * @type {(\n   *   (<T extends Node>(test: T['type']|Partial<T>|TestFunctionPredicate<T>) => AssertPredicate<T>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * Generate an assertion from a check.\n     * @param {Test} [test]\n     * When nullish, checks if `node` is a `Node`.\n     * When `string`, works like passing `function (node) {return node.type === test}`.\n     * When `function` checks if function passed the node is true.\n     * When `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n     * When `array`, checks any one of the subtests pass.\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n/**\n * @param {Array.<Type|Props|TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array.<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {unknown[]} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Utility to assert each property in `test` is represented in `node`, and each\n * values are strictly equal.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n *\n * @param {Type} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Utility to convert a string into a function which checks a given node’s type\n * for said string.\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {Array.<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(...parameters) {\n    // @ts-expect-error: spreading is fine.\n    return Boolean(check.call(this, ...parameters))\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return d\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('./complex-types.js').Action} Action\n * @typedef {import('./complex-types.js').Index} Index\n * @typedef {import('./complex-types.js').ActionTuple} ActionTuple\n * @typedef {import('./complex-types.js').VisitorResult} VisitorResult\n * @typedef {import('./complex-types.js').Visitor} Visitor\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal\n */\nexport const CONTINUE = true\n/**\n * Do not traverse this node’s children\n */\nexport const SKIP = 'skip'\n/**\n * Stop traversing immediately\n */\nexport const EXIT = false\n\n/**\n * Visit children of tree which pass test.\n *\n * @param tree\n *   Tree to walk\n * @param [test]\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Function called for nodes that pass `test`.\n * @param [reverse=false]\n *   Traverse in reverse preorder (NRL) instead of preorder (NLR) (default).\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: import('./complex-types.js').BuildVisitor<Tree, Check>, reverse?: boolean) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: import('./complex-types.js').BuildVisitor<Tree>, reverse?: boolean) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {import('./complex-types.js').Visitor<Node>} visitor\n     * @param {boolean} [reverse=false]\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, null, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number?} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = typeof node === 'object' && node !== null ? node : {}\n        /** @type {string|undefined} */\n        let name\n\n        if (typeof value.type === 'string') {\n          name =\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' +\n              color(value.type + (name ? '<' + name + '>' : '')) +\n              ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * @param {VisitorResult} value\n * @returns {ActionTuple}\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","trim","str","replace","style","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","end","source","content","errorsList","error","msg","err","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","FORWARD_SLASH","charAt","ASTERISK","EMPTY_STRING","type","declarations","decl","decls","declaration","prop","val","ret","property","ReactPropTypesSecret","__webpack_require__","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","u","b","Symbol","for","d","e","f","g","h","k","l","n","p","q","t","v","a","r","$$typeof","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","SuspenseList","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isSuspenseList","isValidElementType","getModuleId","typeOf","parse","iterator","output","hasIterator","len","isBuffer","document","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","charCodeAt","blankLine","tokenize","effects","ok","nok","micromark_factory_space__WEBPACK_IMPORTED_MODULE_0__","code","micromark_util_character__WEBPACK_IMPORTED_MODULE_1__","Ch","partial","factorySpace","max","limit","Number","POSITIVE_INFINITY","size","micromark_util_character__WEBPACK_IMPORTED_MODULE_0__","xz","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","apply","classifyCharacter","z3","B8","Xh","combineExtensions","extensions","all","index","syntaxExtension","extension","hook","maybe","undefined","left","right","constructs","existing","before","add","micromark_util_chunked__WEBPACK_IMPORTED_MODULE_0__","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","micromark_util_decode_numeric_character_reference__WEBPACK_IMPORTED_MODULE_0__","o","decode_named_character_reference__WEBPACK_IMPORTED_MODULE_1__","T","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","includes","stringifyPosition","point","VFileMessage","Error","place","origin","parts","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","seenNonSlash","assertPath","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","segments","joined","normalize","absolute","normalizeString","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","sep","JSON","stringify","proc","cwd","isUrl","fileURLOrPath","href","order","VFile","is_buffer","data","messages","history","stored","map","urlToPath","URL","protocol","getPathFromURLPosix","hostname","pathname","third","decodeURIComponent","assertNonEmpty","lib_assertPath","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","toStringTag","unified","frozen","transformers","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","fn","wrap","middleware","fnExpectsCallback","done","Promise","then","use","middelware","attachers","namespace","freezeIndex","processor","assertUnfrozen","Parser","Compiler","freeze","attacher","transformer","settings","addPlugin","addList","addPreset","assign","plugins","thing","plugin","entry","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","tree","runSync","complete","assertDone","process","node_modules_is_buffer","processSync","destination","own","keys","asyncName","looksLikeAVFile","one","includeImageAlt","alt","mdast_util_to_string_all","children","previous","contentStart","attempt","parser","contentInitial","micromark_factory_space","lineStart","token","contentType","micromark_util_character","document_document","childFlow","childToken","lineStartOffset","self","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","micromark_util_chunked","documentContinued","currentConstruct","concrete","flowStart","interrupt","Boolean","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","exitContainers","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","disable","null","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","_container","content_content","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","blank_line","w","flowInitial","afterConstruct","resolver","createResolver","initializeFactory","text_text","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","tabs","chunks","bufferIndex","chunk","_index","_bufferIndex","thematicBreak","sequence","initialSize","kind","marker","pY","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","state","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","Av","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","titleConstruct","codeIndented","afterStartPrefix","afterPrefix","indentedContent","setextUnderline","paragraph","closingSequence","closingSequenceEnd","resolveTo","definition","heading","htmlBlockNames","htmlRawNames","nextBlankConstruct","codeFenced","closingFenceConstruct","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","numeric","H$","AF","index_dom","characterEscape","sR","lineEnding","labelEnd","labelStart","defined","_balanced","_inactive","balanced","micromark_util_normalize_identifier","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","V","micromark_util_resolve_all","C","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","micromark_util_classify_character","_open","_close","openingSequence","nextEvents","movePoint","labelStartLink","constructs_document","identifier","labelAfter","constructs_flow","fenceOpenInside","headingBreak","startTag","buffer","declarationStart","tagCloseStart","continuationDeclarationInside","jv","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","htmlContinueStart","htmlLineEnd","continuationRawEndTag","constructs_string","constructs_text","schemeOrEmailAtext","n9","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","returnState","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","gap","tailExitIndex","headEnterIndex","search","lib_own","fromMarkdown","atCarriageReturn","compiler","config","configure","combined","transforms","canContainEols","autolink","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeText","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreakEscape","hardBreak","hardBreakTrailing","htmlFlow","html","htmlFlowData","htmlText","htmlTextData","image","listItem","spread","_spread","checked","listItemValue","ancestor","listOrdered","listUnordered","reference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","depth","onexitdata","characterEscapeValue","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","micromark_util_decode_numeric_character_reference","resume","codeFencedFence","lang","onexithardbreak","referenceType","getData","fragment","labelText","micromark_util_decode_string","resource","setextHeadingLineSequence","setextHeadingText","mdastExtensions","tokenStack","listStack","setData","prepareList","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","handler","defaultOnError","create","and","errorHandler","parent","onExitError","mdast_util_to_string_toString","ordered","postprocess","micromark_util_combine_extensions","W","constructs_namespaceObject","concat","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","serializeChunks","atTab","main","chunkIndex","sliceChunks","view","startIndex","startBufferIndex","endIndex","endBufferIndex","_","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","preprocess","endPosition","lastIndex","Math","ceil","remark_parse","visit","visitor","reverse","unist_util_visit_parents","S4","parents","pointStart","unist_util_position_point","pointEnd","mdast_util_definitions_own","clean","traverse_own","unknown","augment","traverse_all","traverse_one","handlers","passThrough","returnNode","unknownHandler","nodes","normalizeUri","skip","encodeURIComponent","wrap_wrap","loose","footnoteReference","counter","id","safeId","footnoteOrder","footnoteCounts","reuseCounter","clobberPrefix","dataFootnoteRef","ariaDescribedBy","revert","subtype","suffix","contents","listItemLoose","trimLine","codePointAt","blockquote","break","className","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","listLoose","wrapped","disabled","child","properties","root","table","rows","align","row","out","cellIndex","cell","trimLines","last","toml","ignore","yaml","footnoteDefinition","mdast_util_to_hast_lib_own","toHast","factory","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","definitions","cache","hName","hProperties","hChildren","ctx","foot","footer","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","lib","Schema","normal","space","merge","normalize_normalize","Info","attribute","boolean","booleanish","overloadedBoolean","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","types_boolean","increment","checks","types_namespaceObject","DefinedInfo","mask","create_own","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","html_html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","property_information_html","property_information_svg","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","protocols","valid","dash","cap","kebab","camelcase","hastToReact","ast_to_react_own","tableElements","Set","getElementsBeforeCount","count","styleReplacer","react_markdown_own","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","react","childrenToReact","childIndex","toReact","parentSchema","schema","addProperty","find","Type","rest","dashes","comma_separated_tokens_stringify","input","padRight","padLeft","parseStyle","style_to_object","listDepth","component","components","basic","react_is","linkTarget","transformLinkUri","inline","level","transformImageUri","getInputElement","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","has","whitespace","skipHtml","defaultProps","uri","first","colon","propTypes","prop_types","www","w2","w3","dot","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","namedCharacterReference","punctuationContinuation","punctuation","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","wwwAutolink","previousWww","previousUnbalanced","httpAutolink","previousHttp","t1","t2","s","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","syntax_text","gfmAutolinkLiteral","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmTable","seenDelimiter","hasDash","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","atRowEndHead","originalInterrupt","tokenizeRowEnd","atDelimiterRowBreak","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","inWhitespaceBody","inCellContentEscapeBody","inHead","inDelimiterRow","inRow","cellStart","seenCellInRow","gfmTaskListItem","spaceThenNonSpace","ccount","character","findAndReplace","RegExp","ignored","unist_util_is","O","pairs","toPairs","toExpression","toFunction","pairIndex","grandparent","change","matchObject","global","escapeStringRegexp","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","findUrl","findEmail","literalAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","isCorrectDomain","split","splitUrl","closingParenIndex","openingParens","closingParens","trail","trailExec","email","association","track","options_","lineShift","move","shift","containerFlow","safeOptions","indexStack","tracker","handle","bulletLastUsed","repeat","eol","indentLines","patternCompile","_compiled","listInScope","none","safe","positions","infos","expression","sort","numerical","escapeBackslashes","encode","whole","containerPhrasing","peek","gfmStrikethroughFromMarkdown","strikethrough","gfmStrikethroughToMarkdown","handleDelete","defaultStringLength","toAlignment","gfmTableFromMarkdown","tableData","enterCell","tableHeader","tableRow","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","firstParaghraph","siblings","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","incrementListMarker","blank","remarkGfm","gfmStrikethrough","single","singleTilde","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmFootnoteToMarkdown","subexit","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableAsData","handleTableRowAsData","tableCell","handleTableCell","matrix","markdownTable","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","convert","castFactory","anyFactory","tests","visitParents","subresult","grandparents"],"sourceRoot":""}